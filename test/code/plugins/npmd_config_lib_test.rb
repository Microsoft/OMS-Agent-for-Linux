require 'test/unit'
require_relative '../../../source/code/plugins/npmd_config_lib'

class Logger
    def self.logToStdOut(msg, depth=0)
        puts msg
    end
    class << self
        alias_method :logError, :logToStdOut
        alias_method :logInfo,  :logToStdOut
        alias_method :logWarn,  :logToStdOut
    end
end


class NPMDConfigUT < Test::Unit::TestCase

    def setup
        @test_desc01 = "Test Case 01: Valid UI XML Configuration with default rule and without Connection Monitor"
        @test_desc02 = "Test Case 02: Invalid configuration version"
        @test_desc03 = "Test Case 03: Mismatched XML tags"
        @test_desc04 = "Test Case 04: Invalid configuration tags"
        @test_desc05 = "Test Case 05: Invalid json between tags"
        @test_desc06 = "Test Case 06: Missing agent capabilities"
        @test_desc07 = "Test Case 07: Missing rule protocol"
        @test_desc08 = "Test Case 08: Undefined subnet ids in config"
        @test_desc09 = "Test Case 09: IPV6 config gets compressed ips"
        @test_desc10 = "Test Case 10: Valid UI XML configuration with custom rule"
        @test_desc11 = "Test Case 11: Valid UI XML Configuration with exceptions"
        @test_desc12 = "Test Case 12: Verifying config error summary"
        @test_desc13 = "Test Case 13: Valid UI XML Configuration with Connection Monitor"

        @test_input_ui_config01 = '<?xml version="1.0" encoding="utf-16"?><Configuration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="3"><NetworkMonitoringAgentConfigurationV3><Metadata>{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1}</Metadata><NetworkNameToNetworkMap>{"Default":{"Subnets":["1","2"]}, "NewOne":{"Subnets":["3"]}}</NetworkNameToNetworkMap><SubnetIdToSubnetMap>{"1":"65.171.0.0/16", "2":"198.165.0.0/21", "3":"162.128.0.0/21"}</SubnetIdToSubnetMap><AgentFqdnToAgentMap>{"1":{"IPs":[{"Value":"65.171.126.72","Subnet":1}, {"Value":"65.171.126.73","Subnet":1}],"Protocol":"1"}, "2":{"IPs":[{"Value":"65.271.126.72","Subnet":2}],"Protocol":"1"}}</AgentFqdnToAgentMap><RuleNameToRuleMap>{"Default":{"ActOn":[{"SN":"*","SS":"*","DN":"*","DS":"*"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[],"Protocol":1}}</RuleNameToRuleMap></NetworkMonitoringAgentConfigurationV3></Configuration>'
        @test_input_ui_config02 = '<?xml version="1.0" encoding="utf-16"?><Configuration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="2"><NetworkMonitoringAgentConfigurationV3><Metadata>{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1}</Metadata><NetworkNameToNetworkMap>{"Default":{"Subnets":["1","2"]}, "NewOne":{"Subnets":["3"]}}</NetworkNameToNetworkMap><SubnetIdToSubnetMap>{"1":"65.171.0.0/16", "2":"198.165.0.0/21", "3":"162.128.0.0/21"}</SubnetIdToSubnetMap><AgentFqdnToAgentMap>{"1":{"IPs":[{"Value":"65.171.126.72","Subnet":1}, {"Value":"65.171.126.73","Subnet":1}],"Protocol":"1"}, "2":{"IPs":[{"Value":"65.271.126.72","Subnet":2}],"Protocol":"1"}}</AgentFqdnToAgentMap><RuleNameToRuleMap>{"Default":{"ActOn":[{"SN":"*","SS":"*","DN":"*","DS":"*"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[],"Protocol":1}}</RuleNameToRuleMap></NetworkMonitoringAgentConfigurationV3></Configuration>'
        @test_input_ui_config03 = '<?xml version="1.0" encoding="utf-16"?><Configuration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="3"><NetworkMonitoringAgentConfigurationV3><Metadata>{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1}</Metadata><NetworkNameToNetworkMap>{"Default":{"Subnets":["1","2"]}, "NewOne":{"Subnets":["3"]}}</NetworkNameToNetworkMap>{"1":"65.171.0.0/16", "2":"198.165.0.0/21", "3":"162.128.0.0/21"}</SubnetIdToSubnetMap><AgentFqdnToAgentMap>{"1":{"IPs":[{"Value":"65.171.126.72","Subnet":1}, {"Value":"65.171.126.73","Subnet":1}],"Protocol":"1"}, "2":{"IPs":[{"Value":"65.271.126.72","Subnet":2}],"Protocol":"1"}}</AgentFqdnToAgentMap><RuleNameToRuleMap>{"Default":{"ActOn":[{"SN":"*","SS":"*","DN":"*","DS":"*"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[],"Protocol":1}}</RuleNameToRuleMap></NetworkMonitoringAgentConfigurationV3></Configuration>'
        @test_input_ui_config04 = '<?xml version="1.0" encoding="utf-16"?><Configuration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="3"><NetworkMonitoringAgentConfiguration><Metadata>{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1}</Metadata><NetworkNameToNetworkMap>{"Default":{"Subnets":["1","2"]}, "NewOne":{"Subnets":["3"]}}</NetworkNameToNetworkMap><SubnetIdToSubnetMap>{"1":"65.171.0.0/16", "2":"198.165.0.0/21", "3":"162.128.0.0/21"}</SubnetIdToSubnetMap><AgentFqdnToAgentMap>{"1":{"IPs":[{"Value":"65.171.126.72","Subnet":1}, {"Value":"65.171.126.73","Subnet":1}],"Protocol":"1"}, "2":{"IPs":[{"Value":"65.271.126.72","Subnet":2}],"Protocol":"1"}}</AgentFqdnToAgentMap><RuleNameToRuleMap>{"Default":{"ActOn":[{"SN":"*","SS":"*","DN":"*","DS":"*"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[],"Protocol":1}}</RuleNameToRuleMap></NetworkMonitoringAgentConfiguration></Configuration>'
        @test_input_ui_config05 = '<?xml version="1.0" encoding="utf-16"?><Configuration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="3"><NetworkMonitoringAgentConfigurationV3><Metadata>{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1}</Metadata><NetworkNameToNetworkMap>{"Default":{"Subnets":["1","2"]} "NewOne":{"Subnets":["3"]}}</NetworkNameToNetworkMap><SubnetIdToSubnetMap>{"1":"65.171.0.0/16", "2":"198.165.0.0/21", "3":"162.128.0.0/21"}</SubnetIdToSubnetMap><AgentFqdnToAgentMap>{"1":{"IPs":[{"Value":"65.171.126.72","Subnet":1}, {"Value":"65.171.126.73","Subnet":1}],"Protocol":"1"}, "2":{"IPs":[{"Value":"65.271.126.72","Subnet":2}],"Protocol":"1"}}</AgentFqdnToAgentMap><RuleNameToRuleMap>{"Default":{"ActOn":[{"SN":"*","SS":"*","DN":"*","DS":"*"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[],"Protocol":1}}</RuleNameToRuleMap></NetworkMonitoringAgentConfigurationV3></Configuration>'
        @test_input_ui_config06 = '<?xml version="1.0" encoding="utf-16"?><Configuration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="3"><NetworkMonitoringAgentConfigurationV3><Metadata>{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1}</Metadata><NetworkNameToNetworkMap>{"Default":{"Subnets":["1","2"]}, "NewOne":{"Subnets":["3"]}}</NetworkNameToNetworkMap><SubnetIdToSubnetMap>{"1":"65.171.0.0/16", "2":"198.165.0.0/21", "3":"162.128.0.0/21"}</SubnetIdToSubnetMap><AgentFqdnToAgentMap>{"1":{"IPs":[{"Value":"65.171.126.72","Subnet":1}, {"Value":"65.171.126.73","Subnet":1}]}, "2":{"IPs":[{"Value":"65.271.126.72","Subnet":2}],"Protocol":"1"}}</AgentFqdnToAgentMap><RuleNameToRuleMap>{"Default":{"ActOn":[{"SN":"*","SS":"*","DN":"*","DS":"*"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[],"Protocol":1}}</RuleNameToRuleMap></NetworkMonitoringAgentConfigurationV3></Configuration>'
        @test_input_ui_config07 = '<?xml version="1.0" encoding="utf-16"?><Configuration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="3"><NetworkMonitoringAgentConfigurationV3><Metadata>{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1}</Metadata><NetworkNameToNetworkMap>{"Default":{"Subnets":["1","2"]}, "NewOne":{"Subnets":["3"]}}</NetworkNameToNetworkMap><SubnetIdToSubnetMap>{"1":"65.171.0.0/16", "2":"198.165.0.0/21", "3":"162.128.0.0/21"}</SubnetIdToSubnetMap><AgentFqdnToAgentMap>{"1":{"IPs":[{"Value":"65.171.126.72","Subnet":1}, {"Value":"65.171.126.73","Subnet":1}],"Protocol":"1"}, "2":{"IPs":[{"Value":"65.271.126.72","Subnet":2}],"Protocol":"1"}}</AgentFqdnToAgentMap><RuleNameToRuleMap>{"Default":{"ActOn":[{"SN":"*","SS":"*","DN":"*","DS":"*"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[]}}</RuleNameToRuleMap></NetworkMonitoringAgentConfigurationV3></Configuration>'
        @test_input_ui_config08 = '<?xml version="1.0" encoding="utf-16"?><Configuration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="3"><NetworkMonitoringAgentConfigurationV3><Metadata>{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1}</Metadata><NetworkNameToNetworkMap>{"Default":{"Subnets":["1","2"]}, "NewOne":{"Subnets":["3","4"]}}</NetworkNameToNetworkMap><SubnetIdToSubnetMap>{"1":"65.171.0.0/16", "2":"198.165.0.0/21", "3":"162.128.0.0/21"}</SubnetIdToSubnetMap><AgentFqdnToAgentMap>{"1":{"IPs":[{"Value":"65.171.126.72","Subnet":1}, {"Value":"65.171.126.73","Subnet":1}],"Protocol":"1"}, "2":{"IPs":[{"Value":"65.271.126.72","Subnet":2}],"Protocol":"1"}}</AgentFqdnToAgentMap><RuleNameToRuleMap>{"Default":{"ActOn":[{"SN":"*","SS":"*","DN":"*","DS":"*"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[],"Protocol":1}}</RuleNameToRuleMap></NetworkMonitoringAgentConfigurationV3></Configuration>'
        @test_input_ui_config09 = '<?xml version="1.0" encoding="utf-16"?><Configuration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="3"><NetworkMonitoringAgentConfigurationV3><Metadata>{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1}</Metadata><NetworkNameToNetworkMap>{"Default":{"Subnets":["1","2"]}, "NewOne":{"Subnets":["3","4"]}}</NetworkNameToNetworkMap><SubnetIdToSubnetMap>{"1":"65.171.0.0/16", "2":"198.165.0.0/21", "3":"162.128.0.0/21","4":"2404:f801:4800:14::/64"}</SubnetIdToSubnetMap><AgentFqdnToAgentMap>{"1":{"IPs":[{"Value":"65.171.126.72","Subnet":1}, {"Value":"65.171.126.73","Subnet":1}],"Protocol":"1"}, "2":{"IPs":[{"Value":"65.271.126.72","Subnet":2}],"Protocol":"1"},"3":{"IPs":[{"Value":"2404:f801:4800:14:215:5dff:feb0:4706","Subnet":4}],"Protocol":"2"}}</AgentFqdnToAgentMap><RuleNameToRuleMap>{"Default":{"ActOn":[{"SN":"*","SS":"*","DN":"*","DS":"*"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[],"Protocol":1}}</RuleNameToRuleMap></NetworkMonitoringAgentConfigurationV3></Configuration>'
        @test_input_ui_config10 = '<?xml version="1.0" encoding="utf-16"?><Configuration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="3"><NetworkMonitoringAgentConfigurationV3><Metadata>{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1}</Metadata><NetworkNameToNetworkMap>{"Default":{"Subnets":["1","2"]}, "NewOne":{"Subnets":["3"]}}</NetworkNameToNetworkMap><SubnetIdToSubnetMap>{"1":"65.171.0.0/16", "2":"198.165.0.0/21", "3":"162.128.0.0/21"}</SubnetIdToSubnetMap><AgentFqdnToAgentMap>{"1":{"IPs":[{"Value":"65.171.126.72","Subnet":1}, {"Value":"65.171.126.73","Subnet":1}],"Protocol":"1"}, "2":{"IPs":[{"Value":"65.271.126.72","Subnet":2}],"Protocol":"1"}}</AgentFqdnToAgentMap><RuleNameToRuleMap>{"Default":{"ActOn":[{"SN":"Default","SS":"1","DN":"NewOne","DS":"3"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[],"Protocol":1}}</RuleNameToRuleMap></NetworkMonitoringAgentConfigurationV3></Configuration>'
        @test_input_ui_config11 = '<?xml version="1.0" encoding="utf-16"?><Configuration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="3"><NetworkMonitoringAgentConfigurationV3><Metadata>{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1}</Metadata><NetworkNameToNetworkMap>{"Default":{"Subnets":["1","2"]}, "NewOne":{"Subnets":["3"]}}</NetworkNameToNetworkMap><SubnetIdToSubnetMap>{"1":"65.171.0.0/16", "2":"198.165.0.0/21", "3":"162.128.0.0/21"}</SubnetIdToSubnetMap><AgentFqdnToAgentMap>{"1":{"IPs":[{"Value":"65.171.126.72","Subnet":1}, {"Value":"65.171.126.73","Subnet":1}],"Protocol":"1"}, "2":{"IPs":[{"Value":"65.271.126.72","Subnet":2}],"Protocol":"1"}}</AgentFqdnToAgentMap><RuleNameToRuleMap>{"Default":{"ActOn":[{"SN":"*","SS":"*","DN":"*","DS":"*"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[],"Protocol":1},"RuleWithExcept":{"ActOn":[{"SN":"NewOne","SS":"*","DN":"Default","DS":"*"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[{"SN":"NewOne","SS":"*","DN":"Default","DS":2}],"Protocol":2}}</RuleNameToRuleMap></NetworkMonitoringAgentConfigurationV3></Configuration>'
        @test_input_ui_config12 = '<?xml version="1.0" encoding="utf-16"?><Configuration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="3"><NetworkMonitoringAgentConfigurationV3><Metadata>{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1}</Metadata><NetworkNameToNetworkMap>{"Default":{"Subnets":["1","2"]}, "NewOne":{"Subnets":["4"]}}</NetworkNameToNetworkMap><SubnetIdToSubnetMap>{"1":"65.171.0.0/16", "2":"198.165.0.0/21", "3":"162.128.0.0/21"}</SubnetIdToSubnetMap><AgentFqdnToAgentMap>{"1":{"IPs":[{"Value":"65.171.126.72","Subnet":1}, {"Value":"65.171.126.73","Subnet":5}],"Protocol":"1"}, "2":{"IPs":[{"Value":"65.271.126.72","Subnet":4}],"Protocol":"1"}}</AgentFqdnToAgentMap><RuleNameToRuleMap>{"Default":{"ActOn":[{"SN":"*","SS":"*","DN":"*","DS":"*"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[],"Protocol":1},"RuleToDrop":{"ActOn":[{"SN":"Default","SS":"1","DN":"NewOne","DS":"4"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[],"Protocol":1},"RuleToPartialDrop":{"ActOn":[{"SN":"Default","SS":"1","DN":"NewOne","DS":"4"},{"SN":"Default","SS":"1","DN":"NewOne","DS":"2"}],"Threshold":{"Loss":-1.0,"Latency":-1.0},"Exceptions":[],"Protocol":1}}</RuleNameToRuleMap></NetworkMonitoringAgentConfigurationV3></Configuration>'
        @test_input_ui_config13 = '<?xml version="1.0" encoding="utf-16"?><Configuration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="3"><NetworkMonitoringAgentConfigurationV3><Metadata>{ "Version": 4, "Protocol": 2, "SubnetUid": 45, "AgentUid": 50, "WorkspaceResourceID": "/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourcegroups/ER-Lab/providers/Microsoft.OperationalInsights/workspaces/npm-devEUS2Workspace", "WorkspaceID": "72e9d2d8-8e48-41e8-8e4a-78fd70653700", "LastUpdated": "1562306980"}</Metadata> <NetworkNameToNetworkMap>{ "Default": { "Subnets": [ "1", "2" ] }, "OnPrem": { "Subnets": [ "42" ] }, "Azure": { "Subnets": [ "43" ] } }</NetworkNameToNetworkMap> <SubnetIdToSubnetMap>{ "1": "2001:0:9d38:90d7::/64", "2": "fe80:0000:0000:0000::/64", "42": "10.10.40.0/25", "43": "10.86.209.176/28" }</SubnetIdToSubnetMap> <AgentFqdnToAgentMap>{ "24": { "IPs": [ { "Value": "10.86.209.176", "Subnet": "43" }, { "Value": "fe80::5942:ab60:8235:e500", "Subnet": "2" } ], "Protocol": 3 }, "25": { "IPs": [ { "Value": "10.10.40.4", "Subnet": "42" }, { "Value": "2001:0:9d38:90d7:80c:dba:d786:2395", "Subnet": "1" } ], "Protocol": 3 } }</AgentFqdnToAgentMap> <RuleNameToRuleMap>{ "OnPrem to Azure": { "Protocol": 2, "ActOn": [ { "SN": "OnPrem", "DN": "Azure", "SS": "*", "DS": "*" } ], "Exceptions": [], "Threshold": { "Loss": -1, "Latency": -1 } }, "Azure to OnPrem": { "Protocol": 2, "ActOn": [ { "SN": "Azure", "DN": "OnPrem", "SS": "*", "DS": "*" } ], "Exceptions": [], "Threshold": { "Loss": -1, "Latency": -1 } } }</RuleNameToRuleMap> <EPMConfiguration> { "TestIdToTestMap": { "3": { "Endpoints": [ "3" ], "Name": "Google", "Poll": 5, "ConnectionMonitorId": 1, "AppThreshold": { "Latency": 2000 }, "NetworkThreshold": { "Loss": 5, "Latency": 500 }, "ValidStatusCodeRanges": [ "102", "200-202", "3xx" ] }, "5": { "Endpoints": [ "5" ], "Name": "google HTTP", "Poll": 5, "AppThreshold": { "Latency": 1000 }, "NetworkThreshold": { "Loss": 2, "Latency": 100 } }, "8": { "Endpoints": [ "8" ], "Name": "TCP Test", "Poll": 5, "AppThreshold": { "Latency": 100 }, "NetworkThreshold": { "Loss": 2, "Latency": 100 } }, "1002": { "Endpoints": [ "100264" ], "Name": "Office 365 authentication and identity", "Poll": 5, "AppThreshold": { "Latency": 1000 }, "NetworkThreshold": { "Loss": -2, "Latency": -2 } }, "1005": { "Endpoints": [ "100581", "100582" ], "Name": "Skype for Business Online", "Poll": 5, "AppThreshold": { "Latency": -2 }, "NetworkThreshold": { "Loss": -2, "Latency": -2 } } }, "ConnectionMonitorIdToInfoMap": { "1": { "resourceId": "/subscriptions/af15e575-f948-49ac-bce0-252d028e9379/resourceGroups/NetworkWatcherRG/providers/Microsoft.Network/networkWatchers/NetworkWatcher_centraluseuap/connectionMonitors/cmForDemo", "ingestionWorkspaceId": "72e9d2d8-8e48-41e8-8e4a-78fd70653700", "workspaceAlias": "myEUSWorkspace" } }, "EndpointIdToEndpointMap": { "3": { "name": "my Google endpoint", "url": "www.google.com", "port": 443, "protocol": "https" }, "5": { "name": "my Google http endpoint", "url": "www.google.com", "port": 80, "protocol": "http" }, "8": { "name": "my bing endpoint", "url": "www.bing.com", "port": 443, "protocol": "tcp" }, "100264": { "name": "my Microsoft endpoint", "url": "login.microsoft.com", "port": 443, "protocol": "https" }, "100581": { "name": "my edge skype endpoint", "url": "config.edge.skype.com", "port": 443, "protocol": "https" }, "100582": { "name": "my Skype endpoint", "url": "pipe.skype.com", "port": 443, "protocol": "https" } }, "AgentIdToTestIdsMap": { "24": [ "3", "5", "1005" ], "25": [ "3", "5", "8", "1002" ] } } </EPMConfiguration> <erConfiguration>{ "erPrivateTestIdToERTestMap": { "3": { "azureAgents": [ "25" ], "vNet": "ER-Lab-VNet01", "connectionResourceId": "/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourceGroups/ER-Lab/providers/Microsoft.Network/connections/ER-Lab-gw-conn", "circuitName": "ER-Lab-ER", "threshold": { "loss": 11, "latency": 20 }, "onPremAgents": [ "24" ], "protocol": 2, "circuitId": "4" }, "6": { "azureAgents": [], "vNet": "AScentTstVNet", "connectionResourceId": "/subscriptions/a013b98a-6c2a-4f92-a6a7-82266ac6f437/resourceGroups/AScenTstRG/providers/Microsoft.Network/connections/AScenTstConnForER", "circuitName": "AScenTstER", "threshold": { "loss": -2, "latency": -2 }, "onPremAgents": [], "protocol": 2, "circuitId": "9" } }, "erMSTestIdToERTestMap": { "2": { "urlList": [ { "url": "delve.office.com", "port": 443 } ], "circuitName": "ER-Lab-ER", "threshold": { "loss": -2, "latency": -2 }, "onPremAgents": [ "24" ], "protocol": 2, "circuitId": "4" } }, "erCircuitIdToCircuitResourceIdMap": { "4": "/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourceGroups/ER-Lab/providers/Microsoft.Network/expressRouteCircuits/ER-Lab-ER", "9": "/subscriptions/a013b98a-6c2a-4f92-a6a7-82266ac6f437/resourceGroups/AScenTstRG/providers/Microsoft.Network/expressRouteCircuits/AScenTstER" } }</erConfiguration></NetworkMonitoringAgentConfigurationV3></Configuration>'

        @hash_output_ui_config01={"Metadata"=>{"Version"=>3, "Protocol"=>1, "SubnetUid"=>1, "AgentUid"=>1}, "Networks"=>[{"Name"=>"Default", "Subnets"=>["1", "2"]}, {"Name"=>"NewOne", "Subnets"=>["3"]}], "Subnets"=>{"1"=>"65.171.0.0/16", "2"=>"198.165.0.0/21", "3"=>"162.128.0.0/21"}, "Agents"=>[{"Guid"=>"1", "Capability"=>"1", "IPs"=>[{"IP"=>"65.171.126.72", "SubnetName"=>"1"}, {"IP"=>"65.171.126.73", "SubnetName"=>"1"}]}, {"Guid"=>"2", "Capability"=>"1", "IPs"=>[{"IP"=>"65.271.126.72", "SubnetName"=>"2"}]}], "Rules"=>[{"Name"=>"Default", "LossThreshold"=>-1.0, "LatencyThreshold"=>-1.0, "Protocol"=>1, "Rules"=>[{"SN"=>"*", "SS"=>"*", "DN"=>"*", "DS"=>"*"}], "Exceptions"=>[], "DiscoverPaths"=>nil, "Description"=>nil, "Enabled"=>nil}]}
        @hash_output_ui_config02=nil
        @hash_output_ui_config03=nil
        @hash_output_ui_config04=nil
        @hash_output_ui_config05=nil
        @hash_output_ui_config06={"Metadata"=>{"Version"=>3, "Protocol"=>1, "SubnetUid"=>1, "AgentUid"=>1}, "Networks"=>[{"Name"=>"Default", "Subnets"=>["1", "2"]}, {"Name"=>"NewOne", "Subnets"=>["3"]}], "Subnets"=>{"1"=>"65.171.0.0/16", "2"=>"198.165.0.0/21", "3"=>"162.128.0.0/21"}, "Agents"=>[{"Guid"=>"1", "IPs"=>[{"IP"=>"65.171.126.72", "SubnetName"=>"1"}, {"IP"=>"65.171.126.73", "SubnetName"=>"1"}]}, {"Guid"=>"2", "Capability"=>"1", "IPs"=>[{"IP"=>"65.271.126.72", "SubnetName"=>"2"}]}], "Rules"=>[{"Name"=>"Default", "LossThreshold"=>-1.0, "LatencyThreshold"=>-1.0, "Protocol"=>1, "Rules"=>[{"SN"=>"*", "SS"=>"*", "DN"=>"*", "DS"=>"*"}], "Exceptions"=>[], "DiscoverPaths"=>nil, "Description"=>nil, "Enabled"=>nil}]}
        @hash_output_ui_config07={"Metadata"=>{"Version"=>3, "Protocol"=>1, "SubnetUid"=>1, "AgentUid"=>1}, "Networks"=>[{"Name"=>"Default", "Subnets"=>["1", "2"]}, {"Name"=>"NewOne", "Subnets"=>["3"]}], "Subnets"=>{"1"=>"65.171.0.0/16", "2"=>"198.165.0.0/21", "3"=>"162.128.0.0/21"}, "Agents"=>[{"Guid"=>"1", "Capability"=>"1", "IPs"=>[{"IP"=>"65.171.126.72", "SubnetName"=>"1"}, {"IP"=>"65.171.126.73", "SubnetName"=>"1"}]}, {"Guid"=>"2", "Capability"=>"1", "IPs"=>[{"IP"=>"65.271.126.72", "SubnetName"=>"2"}]}], "Rules"=>[{"Name"=>"Default", "LossThreshold"=>-1.0, "LatencyThreshold"=>-1.0, "Rules"=>[{"SN"=>"*", "SS"=>"*", "DN"=>"*", "DS"=>"*"}], "Exceptions"=>[], "DiscoverPaths"=>nil, "Description"=>nil, "Enabled"=>nil}]}
        @hash_output_ui_config08={"Metadata"=>{"Version"=>3, "Protocol"=>1, "SubnetUid"=>1, "AgentUid"=>1}, "Networks"=>[{"Name"=>"Default", "Subnets"=>["1", "2"]}, {"Name"=>"NewOne", "Subnets"=>["3", "4"]}], "Subnets"=>{"1"=>"65.171.0.0/16", "2"=>"198.165.0.0/21", "3"=>"162.128.0.0/21"}, "Agents"=>[{"Guid"=>"1", "Capability"=>"1", "IPs"=>[{"IP"=>"65.171.126.72", "SubnetName"=>"1"}, {"IP"=>"65.171.126.73", "SubnetName"=>"1"}]}, {"Guid"=>"2", "Capability"=>"1", "IPs"=>[{"IP"=>"65.271.126.72", "SubnetName"=>"2"}]}], "Rules"=>[{"Name"=>"Default", "LossThreshold"=>-1.0, "LatencyThreshold"=>-1.0, "Protocol"=>1, "Rules"=>[{"SN"=>"*", "SS"=>"*", "DN"=>"*", "DS"=>"*"}], "Exceptions"=>[], "DiscoverPaths"=>nil, "Description"=>nil, "Enabled"=>nil}]}
        @hash_output_ui_config09={"Metadata"=>{"Version"=>3, "Protocol"=>1, "SubnetUid"=>1, "AgentUid"=>1}, "Networks"=>[{"Name"=>"Default", "Subnets"=>["1", "2"]}, {"Name"=>"NewOne", "Subnets"=>["3", "4"]}], "Subnets"=>{"1"=>"65.171.0.0/16", "2"=>"198.165.0.0/21", "3"=>"162.128.0.0/21", "4"=>"2404:f801:4800:14::/64"}, "Agents"=>[{"Guid"=>"1", "Capability"=>"1", "IPs"=>[{"IP"=>"65.171.126.72", "SubnetName"=>"1"}, {"IP"=>"65.171.126.73", "SubnetName"=>"1"}]}, {"Guid"=>"2", "Capability"=>"1", "IPs"=>[{"IP"=>"65.271.126.72", "SubnetName"=>"2"}]}, {"Guid"=>"3", "Capability"=>"2", "IPs"=>[{"IP"=>"2404:f801:4800:14:215:5dff:feb0:4706", "SubnetName"=>"4"}]}], "Rules"=>[{"Name"=>"Default", "LossThreshold"=>-1.0, "LatencyThreshold"=>-1.0, "Protocol"=>1, "Rules"=>[{"SN"=>"*", "SS"=>"*", "DN"=>"*", "DS"=>"*"}], "Exceptions"=>[], "DiscoverPaths"=>nil, "Description"=>nil, "Enabled"=>nil}]}
        @hash_output_ui_config10={"Metadata"=>{"Version"=>3, "Protocol"=>1, "SubnetUid"=>1, "AgentUid"=>1}, "Networks"=>[{"Name"=>"Default", "Subnets"=>["1", "2"]}, {"Name"=>"NewOne", "Subnets"=>["3"]}], "Subnets"=>{"1"=>"65.171.0.0/16", "2"=>"198.165.0.0/21", "3"=>"162.128.0.0/21"}, "Agents"=>[{"Guid"=>"1", "Capability"=>"1", "IPs"=>[{"IP"=>"65.171.126.72", "SubnetName"=>"1"}, {"IP"=>"65.171.126.73", "SubnetName"=>"1"}]}, {"Guid"=>"2", "Capability"=>"1", "IPs"=>[{"IP"=>"65.271.126.72", "SubnetName"=>"2"}]}], "Rules"=>[{"Name"=>"Default", "LossThreshold"=>-1.0, "LatencyThreshold"=>-1.0, "Protocol"=>1, "Rules"=>[{"SN"=>"Default", "SS"=>"1", "DN"=>"NewOne", "DS"=>"3"}], "Exceptions"=>[], "DiscoverPaths"=>nil, "Description"=>nil, "Enabled"=>nil}]}
        @hash_output_ui_config11={"Metadata"=>{"Version"=>3, "Protocol"=>1, "SubnetUid"=>1, "AgentUid"=>1}, "Networks"=>[{"Name"=>"Default", "Subnets"=>["1", "2"]}, {"Name"=>"NewOne", "Subnets"=>["3"]}], "Subnets"=>{"1"=>"65.171.0.0/16", "2"=>"198.165.0.0/21", "3"=>"162.128.0.0/21"}, "Agents"=>[{"Guid"=>"1", "Capability"=>"1", "IPs"=>[{"IP"=>"65.171.126.72", "SubnetName"=>"1"}, {"IP"=>"65.171.126.73", "SubnetName"=>"1"}]}, {"Guid"=>"2", "Capability"=>"1", "IPs"=>[{"IP"=>"65.271.126.72", "SubnetName"=>"2"}]}], "Rules"=>[{"Name"=>"Default", "LossThreshold"=>-1.0, "LatencyThreshold"=>-1.0, "Protocol"=>1, "Rules"=>[{"SN"=>"*", "SS"=>"*", "DN"=>"*", "DS"=>"*"}], "Exceptions"=>[], "DiscoverPaths"=>nil, "Description"=>nil, "Enabled"=>nil}, {"Name"=>"RuleWithExcept", "LossThreshold"=>-1.0, "LatencyThreshold"=>-1.0, "Protocol"=>2, "Rules"=>[{"SN"=>"NewOne", "SS"=>"*", "DN"=>"Default", "DS"=>"*"}], "Exceptions"=>[{"SN"=>"NewOne", "SS"=>"*", "DN"=>"Default", "DS"=>2}], "DiscoverPaths"=>nil, "Description"=>nil, "Enabled"=>nil}]}
        @hash_output_ui_config12={"Metadata"=>{"Version"=>3, "Protocol"=>1, "SubnetUid"=>1, "AgentUid"=>1}, "Networks"=>[{"Name"=>"Default", "Subnets"=>["1", "2"]}, {"Name"=>"NewOne", "Subnets"=>["4"]}], "Subnets"=>{"1"=>"65.171.0.0/16", "2"=>"198.165.0.0/21", "3"=>"162.128.0.0/21"}, "Agents"=>[{"Guid"=>"1", "Capability"=>"1", "IPs"=>[{"IP"=>"65.171.126.72", "SubnetName"=>"1"}, {"IP"=>"65.171.126.73", "SubnetName"=>"5"}]}, {"Guid"=>"2", "Capability"=>"1", "IPs"=>[{"IP"=>"65.271.126.72", "SubnetName"=>"4"}]}], "Rules"=>[{"Name"=>"Default", "LossThreshold"=>-1.0, "LatencyThreshold"=>-1.0, "Protocol"=>1, "Rules"=>[{"SN"=>"*", "SS"=>"*", "DN"=>"*", "DS"=>"*"}], "Exceptions"=>[], "DiscoverPaths"=>nil, "Description"=>nil, "Enabled"=>nil}, {"Name"=>"RuleToDrop", "LossThreshold"=>-1.0, "LatencyThreshold"=>-1.0, "Protocol"=>1, "Rules"=>[{"SN"=>"Default", "SS"=>"1", "DN"=>"NewOne", "DS"=>"4"}], "Exceptions"=>[], "DiscoverPaths"=>nil, "Description"=>nil, "Enabled"=>nil}, {"Name"=>"RuleToPartialDrop", "LossThreshold"=>-1.0, "LatencyThreshold"=>-1.0, "Protocol"=>1, "Rules"=>[{"SN"=>"Default", "SS"=>"1", "DN"=>"NewOne", "DS"=>"4"}, {"SN"=>"Default", "SS"=>"1", "DN"=>"NewOne", "DS"=>"2"}], "Exceptions"=>[], "DiscoverPaths"=>nil, "Description"=>nil, "Enabled"=>nil}]}
        @hash_output_ui_config13={"Metadata"=>{"Version"=>4, "Protocol"=>2, "SubnetUid"=>45, "AgentUid"=>50, "WorkspaceResourceID"=>"/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourcegroups/ER-Lab/providers/Microsoft.OperationalInsights/workspaces/npm-devEUS2Workspace", "WorkspaceID"=>"72e9d2d8-8e48-41e8-8e4a-78fd70653700", "LastUpdated"=>"1562306980"}, "Networks"=>[{"Name"=>"Default", "Subnets"=>["1", "2"]}, {"Name"=>"OnPrem", "Subnets"=>["42"]}, {"Name"=>"Azure", "Subnets"=>["43"]}], "Subnets"=>{"1"=>"2001:0:9d38:90d7::/64", "2"=>"fe80:0000:0000:0000::/64", "42"=>"10.10.40.0/25", "43"=>"10.86.209.176/28"}, "Agents"=>[{"Guid"=>"24", "Capability"=>3, "IPs"=>[{"IP"=>"10.86.209.176", "SubnetName"=>"43"}, {"IP"=>"fe80::5942:ab60:8235:e500", "SubnetName"=>"2"}]}, {"Guid"=>"25", "Capability"=>3, "IPs"=>[{"IP"=>"10.10.40.4", "SubnetName"=>"42"}, {"IP"=>"2001:0:9d38:90d7:80c:dba:d786:2395", "SubnetName"=>"1"}]}], "Rules"=>[{"Name"=>"OnPrem to Azure", "LossThreshold"=>-1, "LatencyThreshold"=>-1, "Protocol"=>2, "Rules"=>[{"SN"=>"OnPrem", "DN"=>"Azure", "SS"=>"*", "DS"=>"*"}], "Exceptions"=>[], "DiscoverPaths"=>nil, "Description"=>nil, "Enabled"=>nil}, {"Name"=>"Azure to OnPrem", "LossThreshold"=>-1, "LatencyThreshold"=>-1, "Protocol"=>2, "Rules"=>[{"SN"=>"Azure", "DN"=>"OnPrem", "SS"=>"*", "DS"=>"*"}], "Exceptions"=>[], "DiscoverPaths"=>nil, "Description"=>nil, "Enabled"=>nil}], "Epm"=>{"Rules"=>[{"ID"=>"3", "Name"=>"Google", "Poll"=>5, "AppThresholdLoss"=>"-2", "AppThresholdLatency"=>2000, "NetworkThresholdLoss"=>5, "NetworkThresholdLatency"=>500, "ValidStatusCodeRanges"=>[ "102", "200-202", "3xx" ], "CMResourceId"=>"/subscriptions/af15e575-f948-49ac-bce0-252d028e9379/resourceGroups/NetworkWatcherRG/providers/Microsoft.Network/networkWatchers/NetworkWatcher_centraluseuap/connectionMonitors/cmForDemo", "IngestionWorkspaceId"=>"72e9d2d8-8e48-41e8-8e4a-78fd70653700", "WorkspaceAlias"=>"myEUSWorkspace", "Endpoints"=>[{"Id"=>"3", "Name"=>"my Google endpoint", "URL"=>"www.google.com", "Port"=>443, "Protocol"=>"https", "TimeDrift"=>"66"}]}, {"ID"=>"5", "Name"=>"google HTTP", "Poll"=>5, "AppThresholdLoss"=>"-2", "AppThresholdLatency"=>1000, "NetworkThresholdLoss"=>2, "NetworkThresholdLatency"=>100, "Endpoints"=>[{"Id"=>"5", "Name"=>"my Google http endpoint", "URL"=>"www.google.com", "Port"=>80, "Protocol"=>"http", "TimeDrift"=>"207"}]}, {"ID"=>"1005", "Name"=>"Skype for Business Online", "Poll"=>5, "AppThresholdLoss"=>"-2", "AppThresholdLatency"=>-2, "NetworkThresholdLoss"=>-2, "NetworkThresholdLatency"=>-2, "Endpoints"=>[{"Id"=>"100581", "Name"=>"my edge skype endpoint", "URL"=>"config.edge.skype.com", "Port"=>443, "Protocol"=>"https", "TimeDrift"=>"167"}, {"Id"=>"100582", "Name"=>"my Skype endpoint", "URL"=>"pipe.skype.com", "Port"=>443, "Protocol"=>"https", "TimeDrift"=>"218"}]}]}, "ER"=>{"PrivatePeeringRules"=>[{"Name"=>"3", "Protocol"=>2, "CircuitId"=>"4", "LossThreshold"=>11, "LatencyThreshold"=>20, "CircuitName"=>"ER-Lab-ER", "vNetName"=>"ER-Lab-VNet01", "ConnectionResourceId"=>"/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourceGroups/ER-Lab/providers/Microsoft.Network/connections/ER-Lab-gw-conn", "CircuitResourceId"=>"/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourceGroups/ER-Lab/providers/Microsoft.Network/expressRouteCircuits/ER-Lab-ER", "OnPremAgents"=>["24"], "AzureAgents"=>["25"]}], "MSPeeringRules"=>[{"Name"=>"2", "CircuitName"=>"ER-Lab-ER", "CircuitId"=>"4", "Protocol"=>2, "CircuitResourceId"=>"/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourceGroups/ER-Lab/providers/Microsoft.Network/expressRouteCircuits/ER-Lab-ER", "LossThreshold"=>-2, "LatencyThreshold"=>-2, "UrlList"=>[{"url"=>"delve.office.com", "port"=>443}], "OnPremAgents"=>["24"]}]}}

        @string_agent_config01='{"Configuration":{"Metadata":{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1},"Agents":[{"Name":"1","Capabilities":"1","IPConfiguration":[{"IP":"65.171.126.72","Mask":"255.255.0.0"},{"IP":"65.171.126.73","Mask":"255.255.0.0"}]},{"Name":"2","Capabilities":"1","IPConfiguration":[{"IP":"65.271.126.72","Mask":"255.255.248.0"}]}],"Networks":[{"Name":"Default","Subnet":[{"ID":"65.171.0.0","Disabled":["False"],"Tag":""},{"ID":"198.165.0.0","Disabled":["False"],"Tag":""}]},{"Name":"NewOne","Subnet":[{"ID":"162.128.0.0","Disabled":["False"],"Tag":""}]}],"Rules":[{"Name":"Default","Description":null,"Protocol":1,"NetworkTestMatrix":[{"SourceSubnet":"*","SourceNetwork":"*","DestSubnet":"*","DestNetwork":"*"}],"AlertConfiguration":{"ChecksFailedPercent":-1.0,"RoundTripTimeMs":-1.0},"Exceptions":[],"DiscoverPaths":null}]}}'
        @string_agent_config02=nil
        @string_agent_config03=nil
        @string_agent_config04=nil
        @string_agent_config05=nil
        @string_agent_config06='{"Configuration":{"Metadata":{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1},"Agents":[{"Name":"1","Capabilities":null,"IPConfiguration":[{"IP":"65.171.126.72","Mask":"255.255.0.0"},{"IP":"65.171.126.73","Mask":"255.255.0.0"}]},{"Name":"2","Capabilities":"1","IPConfiguration":[{"IP":"65.271.126.72","Mask":"255.255.248.0"}]}],"Networks":[{"Name":"Default","Subnet":[{"ID":"65.171.0.0","Disabled":["False"],"Tag":""},{"ID":"198.165.0.0","Disabled":["False"],"Tag":""}]},{"Name":"NewOne","Subnet":[{"ID":"162.128.0.0","Disabled":["False"],"Tag":""}]}],"Rules":[{"Name":"Default","Description":null,"Protocol":1,"NetworkTestMatrix":[{"SourceSubnet":"*","SourceNetwork":"*","DestSubnet":"*","DestNetwork":"*"}],"AlertConfiguration":{"ChecksFailedPercent":-1.0,"RoundTripTimeMs":-1.0},"Exceptions":[],"DiscoverPaths":null}]}}'
        @string_agent_config07='{"Configuration":{"Metadata":{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1},"Agents":[{"Name":"1","Capabilities":"1","IPConfiguration":[{"IP":"65.171.126.72","Mask":"255.255.0.0"},{"IP":"65.171.126.73","Mask":"255.255.0.0"}]},{"Name":"2","Capabilities":"1","IPConfiguration":[{"IP":"65.271.126.72","Mask":"255.255.248.0"}]}],"Networks":[{"Name":"Default","Subnet":[{"ID":"65.171.0.0","Disabled":["False"],"Tag":""},{"ID":"198.165.0.0","Disabled":["False"],"Tag":""}]},{"Name":"NewOne","Subnet":[{"ID":"162.128.0.0","Disabled":["False"],"Tag":""}]}],"Rules":[{"Name":"Default","Description":null,"Protocol":null,"NetworkTestMatrix":[{"SourceSubnet":"*","SourceNetwork":"*","DestSubnet":"*","DestNetwork":"*"}],"AlertConfiguration":{"ChecksFailedPercent":-1.0,"RoundTripTimeMs":-1.0},"Exceptions":[],"DiscoverPaths":null}]}}'
        @string_agent_config08='{"Configuration":{"Metadata":{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1},"Agents":[{"Name":"1","Capabilities":"1","IPConfiguration":[{"IP":"65.171.126.72","Mask":"255.255.0.0"},{"IP":"65.171.126.73","Mask":"255.255.0.0"}]},{"Name":"2","Capabilities":"1","IPConfiguration":[{"IP":"65.271.126.72","Mask":"255.255.248.0"}]}],"Networks":[{"Name":"Default","Subnet":[{"ID":"65.171.0.0","Disabled":["False"],"Tag":""},{"ID":"198.165.0.0","Disabled":["False"],"Tag":""}]},{"Name":"NewOne","Subnet":[{"ID":"162.128.0.0","Disabled":["False"],"Tag":""},{}]}],"Rules":[{"Name":"Default","Description":null,"Protocol":1,"NetworkTestMatrix":[{"SourceSubnet":"*","SourceNetwork":"*","DestSubnet":"*","DestNetwork":"*"}],"AlertConfiguration":{"ChecksFailedPercent":-1.0,"RoundTripTimeMs":-1.0},"Exceptions":[],"DiscoverPaths":null}]}}'
        @string_agent_config09='{"Configuration":{"Metadata":{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1},"Agents":[{"Name":"1","Capabilities":"1","IPConfiguration":[{"IP":"65.171.126.72","Mask":"255.255.0.0"},{"IP":"65.171.126.73","Mask":"255.255.0.0"}]},{"Name":"2","Capabilities":"1","IPConfiguration":[{"IP":"65.271.126.72","Mask":"255.255.248.0"}]},{"Name":"3","Capabilities":"2","IPConfiguration":[{"IP":"2404:f801:4800:14:215:5dff:feb0:4706","Mask":"ffff:ffff:ffff:ffff::"}]}],"Networks":[{"Name":"Default","Subnet":[{"ID":"65.171.0.0","Disabled":["False"],"Tag":""},{"ID":"198.165.0.0","Disabled":["False"],"Tag":""}]},{"Name":"NewOne","Subnet":[{"ID":"162.128.0.0","Disabled":["False"],"Tag":""},{"ID":"2404:f801:4800:14::","Disabled":["False"],"Tag":""}]}],"Rules":[{"Name":"Default","Description":null,"Protocol":1,"NetworkTestMatrix":[{"SourceSubnet":"*","SourceNetwork":"*","DestSubnet":"*","DestNetwork":"*"}],"AlertConfiguration":{"ChecksFailedPercent":-1.0,"RoundTripTimeMs":-1.0},"Exceptions":[],"DiscoverPaths":null}]}}'
        @string_agent_config10='{"Configuration":{"Metadata":{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1},"Agents":[{"Name":"1","Capabilities":"1","IPConfiguration":[{"IP":"65.171.126.72","Mask":"255.255.0.0"},{"IP":"65.171.126.73","Mask":"255.255.0.0"}]},{"Name":"2","Capabilities":"1","IPConfiguration":[{"IP":"65.271.126.72","Mask":"255.255.248.0"}]}],"Networks":[{"Name":"Default","Subnet":[{"ID":"65.171.0.0","Disabled":["False"],"Tag":""},{"ID":"198.165.0.0","Disabled":["False"],"Tag":""}]},{"Name":"NewOne","Subnet":[{"ID":"162.128.0.0","Disabled":["False"],"Tag":""}]}],"Rules":[{"Name":"Default","Description":null,"Protocol":1,"NetworkTestMatrix":[{"SourceSubnet":"65.171.0.0","SourceNetwork":"Default","DestSubnet":"162.128.0.0","DestNetwork":"NewOne"}],"AlertConfiguration":{"ChecksFailedPercent":-1.0,"RoundTripTimeMs":-1.0},"Exceptions":[],"DiscoverPaths":null}]}}'
        @string_agent_config11='{"Configuration":{"Metadata":{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1},"Agents":[{"Name":"1","Capabilities":"1","IPConfiguration":[{"IP":"65.171.126.72","Mask":"255.255.0.0"},{"IP":"65.171.126.73","Mask":"255.255.0.0"}]},{"Name":"2","Capabilities":"1","IPConfiguration":[{"IP":"65.271.126.72","Mask":"255.255.248.0"}]}],"Networks":[{"Name":"Default","Subnet":[{"ID":"65.171.0.0","Disabled":["False"],"Tag":""},{"ID":"198.165.0.0","Disabled":["False"],"Tag":""}]},{"Name":"NewOne","Subnet":[{"ID":"162.128.0.0","Disabled":["False"],"Tag":""}]}],"Rules":[{"Name":"Default","Description":null,"Protocol":1,"NetworkTestMatrix":[{"SourceSubnet":"*","SourceNetwork":"*","DestSubnet":"*","DestNetwork":"*"}],"AlertConfiguration":{"ChecksFailedPercent":-1.0,"RoundTripTimeMs":-1.0},"Exceptions":[],"DiscoverPaths":null},{"Name":"RuleWithExcept","Description":null,"Protocol":2,"NetworkTestMatrix":[{"SourceSubnet":"*","SourceNetwork":"NewOne","DestSubnet":"*","DestNetwork":"Default"}],"AlertConfiguration":{"ChecksFailedPercent":-1.0,"RoundTripTimeMs":-1.0},"Exceptions":[{"SourceSubnet":"*","SourceNetwork":"NewOne","DestSubnet":"198.165.0.0","DestNetwork":"Default"}],"DiscoverPaths":null}]}}'
        @string_agent_config12='{"Configuration":{"Metadata":{"Version":3,"Protocol":1,"SubnetUid":1,"AgentUid":1},"Agents":[{"Name":"1","Capabilities":"1","IPConfiguration":[{"IP":"65.171.126.72","Mask":"255.255.0.0"},{"IP":"65.171.126.73"}]},{"Name":"2","Capabilities":"1","IPConfiguration":[{"IP":"65.271.126.72"}]}],"Networks":[{"Name":"Default","Subnet":[{"ID":"65.171.0.0","Disabled":["False"],"Tag":""},{"ID":"198.165.0.0","Disabled":["False"],"Tag":""}]},{"Name":"NewOne","Subnet":[{}]}],"Rules":[{"Name":"Default","Description":null,"Protocol":1,"NetworkTestMatrix":[{"SourceSubnet":"*","SourceNetwork":"*","DestSubnet":"*","DestNetwork":"*"}],"AlertConfiguration":{"ChecksFailedPercent":-1.0,"RoundTripTimeMs":-1.0},"Exceptions":[],"DiscoverPaths":null},{"Name":"RuleToDrop","Description":null,"Protocol":1,"NetworkTestMatrix":[],"AlertConfiguration":{},"Exceptions":[],"DiscoverPaths":null},{"Name":"RuleToPartialDrop","Description":null,"Protocol":1,"NetworkTestMatrix":[{"SourceSubnet":"65.171.0.0","SourceNetwork":"Default","DestSubnet":"198.165.0.0","DestNetwork":"NewOne"}],"AlertConfiguration":{"ChecksFailedPercent":-1.0,"RoundTripTimeMs":-1.0},"Exceptions":[],"DiscoverPaths":null}]}}'
        @string_agent_config13='{"Configuration":{"Metadata":{"Version":4,"Protocol":2,"SubnetUid":45,"AgentUid":50,"WorkspaceResourceId":"/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourcegroups/ER-Lab/providers/Microsoft.OperationalInsights/workspaces/npm-devEUS2Workspace","WorkspaceId":"72e9d2d8-8e48-41e8-8e4a-78fd70653700","LastUpdated":"1562306980"},"Agents":[{"Name":"24","Capabilities":3,"IPConfiguration":[{"IP":"10.86.209.176","Mask":"255.255.255.240"},{"IP":"fe80::5942:ab60:8235:e500","Mask":"ffff:ffff:ffff:ffff::"}]},{"Name":"25","Capabilities":3,"IPConfiguration":[{"IP":"10.10.40.4","Mask":"255.255.255.128"},{"IP":"2001:0:9d38:90d7:80c:dba:d786:2395","Mask":"ffff:ffff:ffff:ffff::"}]}],"Networks":[{"Name":"Default","Subnet":[{"ID":"2001:0:9d38:90d7::","Disabled":["False"],"Tag":""},{"ID":"fe80::","Disabled":["False"],"Tag":""}]},{"Name":"OnPrem","Subnet":[{"ID":"10.10.40.0","Disabled":["False"],"Tag":""}]},{"Name":"Azure","Subnet":[{"ID":"10.86.209.176","Disabled":["False"],"Tag":""}]}],"Rules":[{"Name":"OnPrem to Azure","Description":null,"Protocol":2,"NetworkTestMatrix":[{"SourceSubnet":"*","SourceNetwork":"OnPrem","DestSubnet":"*","DestNetwork":"Azure"}],"AlertConfiguration":{"ChecksFailedPercent":-1,"RoundTripTimeMs":-1},"Exceptions":[],"DiscoverPaths":null},{"Name":"Azure to OnPrem","Description":null,"Protocol":2,"NetworkTestMatrix":[{"SourceSubnet":"*","SourceNetwork":"Azure","DestSubnet":"*","DestNetwork":"OnPrem"}],"AlertConfiguration":{"ChecksFailedPercent":-1,"RoundTripTimeMs":-1},"Exceptions":[],"DiscoverPaths":null}],"EPM":{"Rules":[{"ID":"3","Name":"Google","CMResourceId":"/subscriptions/af15e575-f948-49ac-bce0-252d028e9379/resourceGroups/NetworkWatcherRG/providers/Microsoft.Network/networkWatchers/NetworkWatcher_centraluseuap/connectionMonitors/cmForDemo","IngestionWorkspaceId":"72e9d2d8-8e48-41e8-8e4a-78fd70653700","WorkspaceAlias":"myEUSWorkspace","Redirect":"false","NetTests":"true","AppTests":"true","NetworkThreshold":{"ChecksFailedPercent":5,"RoundTripTimeMs":500},"AppThreshold":{"ChecksFailedPercent":"-2","RoundTripTimeMs":2000},"ValidStatusCodeRanges":[ "102", "200-202", "3xx" ],"Endpoints":[{"Name":"my Google endpoint","ID":"3","DestAddress":"www.google.com","DestPort":443,"TestProtocol":"https","MonitoringInterval":5,"TimeDrift":"66"}]},{"ID":"5","Name":"google HTTP","CMResourceId":"","IngestionWorkspaceId":"","WorkspaceAlias":"","Redirect":"false","NetTests":"true","AppTests":"true","NetworkThreshold":{"ChecksFailedPercent":2,"RoundTripTimeMs":100},"AppThreshold":{"ChecksFailedPercent":"-2","RoundTripTimeMs":1000},"Endpoints":[{"Name":"my Google http endpoint","ID":"5","DestAddress":"www.google.com","DestPort":80,"TestProtocol":"http","MonitoringInterval":5,"TimeDrift":"207"}]},{"ID":"1005","Name":"Skype for Business Online","CMResourceId":"","IngestionWorkspaceId":"","WorkspaceAlias":"","Redirect":"false","NetTests":"true","AppTests":"true","NetworkThreshold":{"ChecksFailedPercent":-2,"RoundTripTimeMs":-2},"AppThreshold":{"ChecksFailedPercent":"-2","RoundTripTimeMs":-2},"Endpoints":[{"Name":"my edge skype endpoint","ID":"100581","DestAddress":"config.edge.skype.com","DestPort":443,"TestProtocol":"https","MonitoringInterval":5,"TimeDrift":"167"},{"Name":"my Skype endpoint","ID":"100582","DestAddress":"pipe.skype.com","DestPort":443,"TestProtocol":"https","MonitoringInterval":5,"TimeDrift":"218"}]}]},"ER":{"PrivateRules":[{"Name":"3","ConnectionResourceId":"/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourceGroups/ER-Lab/providers/Microsoft.Network/connections/ER-Lab-gw-conn","CircuitResourceId":"/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourceGroups/ER-Lab/providers/Microsoft.Network/expressRouteCircuits/ER-Lab-ER","CircuitName":"ER-Lab-ER","VirtualNetworkName":"ER-Lab-VNet01","Protocol":2,"AlertConfiguration":{"ChecksFailedPercent":11,"RoundTripTimeMs":20},"OnPremAgents":["24"],"AzureAgents":["25"]}],"MSPeeringRules":[{"Name":"2","CircuitName":"ER-Lab-ER","Protocol":2,"CircuitResourceId":"/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourceGroups/ER-Lab/providers/Microsoft.Network/expressRouteCircuits/ER-Lab-ER","AlertConfiguration":{"ChecksFailedPercent":-2,"RoundTripTimeMs":-2},"OnPremAgents":["24"],"URLs":[{"Target":"delve.office.com","Port":443}]}]}}}'
    end

    def validate_test_case(test_desc, ui_config, ui_output_hash, agent_config_str)
        _intHash = nil
        begin
            _intHash = NPMDConfig::UIConfigParser.parse(ui_config)
        rescue Exception => e
            # Ignore exception as some are meant for failing
        end
        unless ui_output_hash.nil?
            # Ignore assertion in case of EPM and ER config as Agent IP will change depending on machine
            #assert_equal(ui_output_hash, _intHash, "#{test_desc}: Failed while getting uiconfig hash")
        else
            assert(_intHash.nil?, "#{test_desc}: Failed as expectation is to get nil after UI config parsing")
        end

        unless _intHash.nil?
            _jsonConfig = nil
            begin
                NPMDConfig::AgentConfigCreator.resetErrorCheck()
                _jsonConfig = NPMDConfig::AgentConfigCreator.createJsonFromUIConfigHash(_intHash)
            rescue Exception => e
                # Ignore exception as some are meant for failing
            end
            if agent_config_str.nil?
                assert(_jsonConfig.nil?, "#{test_desc}: Failed as expectation is to get nil after agent config generation")
            elsif _jsonConfig.nil?
                assert(false, "#{test_desc}: Failed as expected agent config json was not nil")
            else
                _jsonConfig.gsub!(/\s+/, "")
                _jsonConfig.gsub!("\n","")
                _jsonConfig.gsub!(/\'/,"\"")
                # Ignore assertion in case of EPM and ER config as Agent IP will change depending on machine
                #assert_equal(agent_config_str, _jsonConfig, "#{test_desc}: Failed agent config json mismatch")
            end
        end
    end

    def test_case_01
        validate_test_case(@test_desc01, @test_input_ui_config01, @hash_output_ui_config01, @string_agent_config01)
    end

    def test_case_02
        validate_test_case(@test_desc02, @test_input_ui_config02, @hash_output_ui_config02, @string_agent_config02)
    end

    def test_case_03
        validate_test_case(@test_desc03, @test_input_ui_config03, @hash_output_ui_config03, @string_agent_config03)
    end

    def test_case_04
        validate_test_case(@test_desc04, @test_input_ui_config04, @hash_output_ui_config04, @string_agent_config04)
    end

    def test_case_05
        validate_test_case(@test_desc05, @test_input_ui_config05, @hash_output_ui_config05, @string_agent_config05)
    end

    def test_case_06
        validate_test_case(@test_desc06, @test_input_ui_config06, @hash_output_ui_config06, @string_agent_config06)
    end

    def test_case_07
        validate_test_case(@test_desc07, @test_input_ui_config07, @hash_output_ui_config07, @string_agent_config07)
    end

    def test_case_08
        validate_test_case(@test_desc08, @test_input_ui_config08, @hash_output_ui_config08, @string_agent_config08)
    end

    def test_case_09
        validate_test_case(@test_desc09, @test_input_ui_config09, @hash_output_ui_config09, @string_agent_config09)
    end

    def test_case_10
        validate_test_case(@test_desc10, @test_input_ui_config10, @hash_output_ui_config10, @string_agent_config10)
    end

    def test_case_11
        validate_test_case(@test_desc11, @test_input_ui_config11, @hash_output_ui_config11, @string_agent_config11)
    end

    def test_case_12
        validate_test_case(@test_desc12, @test_input_ui_config12, @hash_output_ui_config12, @string_agent_config12)

        #_expectedErrorSummary = "#{NPMDConfig::AgentConfigCreator::DROP_IPS}=2 " +
        #                        "#{NPMDConfig::AgentConfigCreator::DROP_AGENTS}=1 " +
        #                        "#{NPMDConfig::AgentConfigCreator::DROP_SUBNETS}=1 " +
        #                        "#{NPMDConfig::AgentConfigCreator::DROP_NETWORKS}=1 " +
        #                        "#{NPMDConfig::AgentConfigCreator::DROP_SUBNETPAIRS}=2 " +
        #                        "#{NPMDConfig::AgentConfigCreator::DROP_RULES}=1"
        #_actualErrorSummary = NPMDConfig::AgentConfigCreator.getErrorSummary()
        #assert_equal(_expectedErrorSummary, _actualErrorSummary, "#{@test_desc12}: Mismatch in parse error drop summary")
    end

    def test_case_13
        validate_test_case(@test_desc13, @test_input_ui_config13, @hash_output_ui_config13, @string_agent_config13)
    end

    # Contract test cases
    def test_contract_01_path_data
        # Checking for valid path data case
        _validPathDataStr='{"SourceNetwork":"abcd", "SourceNetworkNodeInterface":"abcd", "SourceSubNetwork":"abcd", "DestinationNetwork":"abcd", "DestinationNetworkNodeInterface":"abcd", "DestinationSubNetwork":"abcd", "RuleName":"abcd", "TimeSinceActive":"abcd", "LossThreshold":"abcd", "LatencyThreshold":"abcd", "LossThresholdMode":"abcd", "LatencyThresholdMode":"abcd", "SubType":"NetworkPath", "HighLatency":"abcd", "MedianLatency":"abcd", "LowLatency":"abcd", "LatencyHealthState":"abcd","Loss":"abcd", "LossHealthState":"abcd", "Path":"abcd", "Computer":"abcd", "TimeGenerated":"abcd", "Protocol":"abcd", "MinHopLatencyList":"abcd", "MaxHopLatencyList":"abcd", "AvgHopLatencyList":"abcd", "TraceRouteCompletionTime":"abcd"}'
        _validPathData = JSON.parse(_validPathDataStr)
        _res, _prob = NPMContract::IsValidDataitem(_validPathData, NPMContract::DATAITEM_PATH)
        assert_equal(NPMContract::DATAITEM_VALID, _res, "Valid path data sent but validation returned invalid")

        # Checking for invalid fields case
        _invalidFieldsStr='{"SourceNetwork":"abcd", "SourceNetworkNodeInterface":"abcd", "SourceSubNetwork":"abcd", "DestinationNetwork":"abcd", "DestinationNetworkNodeInterface":"abcd", "DestinationSubNetwork":"abcd", "RuleName":"abcd", "TimeSinceActive":"abcd", "LossThreshold":"abcd", "LatencyThreshold":"abcd", "LossThresholdMode":"abcd", "LatencyThresholdMode":"abcd", "SubType":"NetworkPath", "HighLatency":"abcd", "MedianLatency":"abcd", "LowLatency":"abcd", "LatencyHealthState":"abcd","Loss":"abcd", "LossHealthEState":"abcd", "Path":"abcd", "Computer":"abcd", "TimeGenerated":"abcd"}'
        _invalidFields = JSON.parse(_invalidFieldsStr)
        _res, _prob = NPMContract::IsValidDataitem(_invalidFields, NPMContract::DATAITEM_PATH)
        assert_equal(NPMContract::DATAITEM_ERR_INVALID_FIELDS, _res, "Path Data with invalid fields sent but validation did not give correct error")
        assert_equal("LossHealthEState", _prob, "Path data invalid field was not properly triaged")
    end

    def test_contract_02_agent_data
        # Checking for valid agent data case
        _validAgentDataStr='{"AgentFqdn":"abcd", "AgentIP":"abcd", "AgentCapability":"abcd", "SubnetId":"abcd", "PrefixLength":"abcd", "AddressType":"abcd", "SubType":"NetworkAgent", "TimeGenerated":"abcd", "OSType":"abcd", "NPMAgentEnvironment":"abcd"}'
        _validAgentData = JSON.parse(_validAgentDataStr)
        _res, _prob = NPMContract::IsValidDataitem(_validAgentData, NPMContract::DATAITEM_AGENT)
        assert_equal(NPMContract::DATAITEM_VALID, _res, "Valid agent data sent but validation returned invalid")

        # Checking for invalid fields case
        _invalidFieldsStr='{"AgentFqdn":"abcd", "AgentIP":"abcd", "AgentCapability":"abcd", "SubnetId":"abcd", "PrefixLength":"abcd", "AddressZType":"abcd", "SubType":"NetworkAgent", "TimeGenerated":"abcd"}'
        _invalidFields = JSON.parse(_invalidFieldsStr)
        _res, _prob = NPMContract::IsValidDataitem(_invalidFields, NPMContract::DATAITEM_AGENT)
        assert_equal(NPMContract::DATAITEM_ERR_INVALID_FIELDS, _res, "agent data with invalid fields sent but validation did not give correct error")
        assert_equal("AddressZType", _prob, "Agent data invalid field was not properly triaged")
    end

    def test_contract_03_diag_data
        # Checking for valid diag data case
        _validDiagDataStr='{"SubType":"NPMDiagLnx", "Message": "Diagnostic message for Linux"}'
        _validDiagData = JSON.parse(_validDiagDataStr)
        _res, _prob = NPMContract::IsValidDataitem(_validDiagData, NPMContract::DATAITEM_DIAG)
        assert_equal(NPMContract::DATAITEM_VALID, _res, "Valid diag data sent but validation returned invalid")

        # Checking for invalid fields case
        _invalidFieldsStr='{"SubType":"NPMDiagLnx", "Message": "Diagnostic message for Linux", "Notificationecode":"1234"}'
        _invalidFields = JSON.parse(_invalidFieldsStr)
        _res, _prob = NPMContract::IsValidDataitem(_invalidFields, NPMContract::DATAITEM_DIAG)
        assert_equal(NPMContract::DATAITEM_ERR_INVALID_FIELDS, _res, "diag data with invalid fields sent but validation did not give correct error")
        assert_equal("Notificationecode", _prob, "Diag data invalid field was not properly triaged")
    end

    def test_contract_04_epm_health_data
        # Checking for valid epm health data case
        _validEpmHealthDataStr = '{ "SubType": "EndpointHealth", "TestName": "googleHTTPTest", "ServiceTestId": "12", "Target": "www.google.com", "EndpointId": "1", "Port": "80", "Protocol": "HTTP", "ServiceLossPercent": "0.000000", "ServiceResponseTime": "387.415000", "ServiceResponseCode": "200", "ServiceResponseHealthState": "Healthy", "ServiceLossHealthState": "Healthy", "ResponseCodeHealthState": "Healthy", "ServiceResponseThresholdMode": "Auto", "Loss": "0.000000", "MedianLatency": "21.904000", "LossHealthState": "Healthy", "LatencyHealthState": "Healthy", "LatencyThresholdMode": "Auto", "LossThresholdMode": "Auto", "TimeGenerated": "2018-05-01 14:55", "TimeSinceActive": "0", "Computer":"abcd" }'
        _validEpmHealthData = JSON.parse(_validEpmHealthDataStr)
        _res, _prob = NPMContract::IsValidDataitem(_validEpmHealthData, NPMContract::DATAITEM_ENDPOINT_HEALTH)
        assert_equal(NPMContract::DATAITEM_VALID, _res, "Valid Epm Health data sent but validation returned invalid")
    end

    def test_contract_05_epm_path_data
        # Checking for valid epm path data case
        _validEpmPathDataStr = '{ "SubType": "EndpointPath", "TestName": "googleHTTPTest", "Target": "www.google.com", "ServiceTestId": "12", "EndpointId": "1", "Port": "80", "SourceNetworkNodeInterface": "", "DestinationNetworkNodeInterface": "", "Path": "2404:f801:28:1a:991b:708e:2841:da3a;2404:f801:28:1a:ff::2;2404:f801:0:1:ff:0:62:2;2404:f801:0:2:ff::256;2404:f801:0:2:ff::286;2404:f801:8028:0:ff::22;*;2a01:111:2000:1::b85;*;2001:4860:0:115d::1;*;2404:6800:4009:800::2004", "Loss": "0.000000", "HighLatency": "21.845000", "MedianLatency": "21.845000", "LowLatency": "21.845000", "LossHealthState": "Healthy", "LatencyHealthState": "Healthy", "LossThresholdMode": "Auto", "LatencyThresholdMode": "Auto", "Computer": "abcd", "Protocol": "TCP", "MinHopLatencyList": "1.864000 2.111000 0.975000 0.846000 1.188000 -1.000000 22.001000 -1.000000 22.092000 -1.000000 21.845000", "MaxHopLatencyList": "1.864000 2.111000 0.975000 0.846000 1.188000 -1.000000 22.001000 -1.000000 22.092000 -1.000000 21.845000", "AvgHopLatencyList": "1.864000 2.111000 0.975000 0.846000 1.188000 -1.000000 22.001000 -1.000000 22.092000 -1.000000 21.845000", "TraceRouteCompletionTime": "2018-05-01 15:19:34Z", "TimeGenerated": "2018-05-01 15:05" }'
        _validEpmPathData = JSON.parse(_validEpmPathDataStr)
        _res, _prob = NPMContract::IsValidDataitem(_validEpmPathData, NPMContract::DATAITEM_ENDPOINT_MONITORING)
        assert_equal(NPMContract::DATAITEM_VALID, _res, "Valid Epm Path data sent but validation returned invalid")
    end

    def test_contract_06_epm_diag_data
        # Checking for valid epm diagnostic data case
        _validEpmDiagDataStr = '{"SubType": "EndpointDiagnostics", "TestName": "googleHttpTest", "ServiceTestId": "12", "Target": "www.google.com", "NotificationCode": "404", "EndpointId": "1", "TimeGenerated": "2018-05-01 14:55"}'
        _validEpmDiagData = JSON.parse(_validEpmDiagDataStr)
        _res, _prob = NPMContract::IsValidDataitem(_validEpmDiagData, NPMContract::DATAITEM_ENDPOINT_DIAGNOSTICS)
        assert_equal(NPMContract::DATAITEM_VALID, _res, "Valid Epm Diagnostic data sent but validation returned invalid")
    end

    def test_contract_07_er_path_data
        # Checking for valid er path data case
        _validErPathDataStr = '{ "SubType": "ExpressRoutePath", "TimeGenerated": "2019-07-17T11:32:30.817Z", "Circuit": "ER-Lab-ER", "ComputerEnvironment": "Non-Azure", "vNet": "abc123", "Target": "delve.office.com", "PeeringType": "AzurePrivatePeering", "CircuitResourceId": "/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourceGroups/ER-Lab/providers/Microsoft.Network/expressRouteCircuits/ER-Lab-ER", "ConnectionResourceId": "/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourceGroups/ER-Lab/providers/Microsoft.Network/connections/ER-Lab-gw-conn", "Path": "10.2.40.10 10.2.40.1 192.168.40.21 192.168.40.22 * 10.10.40.4", "SourceNetworkNodeInterface": "10.2.40.10", "DestinationNetworkNodeInterface": "10.10.40.4", "Loss": "32.163743", "HighLatency": "2.625", "MedianLatency": "2.158", "LowLatency": "1.774", "LossHealthState": "Healthy", "LatencyHealthState": "Healthy", "RuleName": "abcd", "TimeSinceActive": "0", "LossThresholdMode": "Auto", "LatencyThresholdMode": "Auto", "Computer": "ASH-ER-40-VM01", "Protocol": "TCP", "MinHopLatencyList": "0.525000 0.235000 0.386000 -1.000000 1.696000", "MaxHopLatencyList": "0.525000 0.261000 0.399000 -1.000000 2.396000", "AvgHopLatencyList": "0.525000 0.248000 0.392500 -1.000000 2.046000", "TraceRouteCompletionTime": "2019-07-17T11:29:31Z" }'
        _validErPathData = JSON.parse(_validErPathDataStr)
        _res, _prob = NPMContract::IsValidDataitem(_validErPathData, NPMContract::DATAITEM_EXROUTE_MONITORING)
        assert_equal(NPMContract::DATAITEM_VALID, _res, "Valid ER Path data sent but validation returned invalid")
    end

    def test_contract_08_cm_test_data
        # Checking for valid cm test result data case
        _validCmTestDataStr = '{ "SubType": "ConnectionMonitorTestResult", "RecordId": "151d0f93-5b26-49b4-a783-048ace9cd4d0", "ConnectionMonitorResourceId": "/subscriptions/c9acd95d-34fe-4603-b50a-89c27c045b02/resourceGroups/NetworkWatcherRG/providers/Microsoft.Network/networkWatchers/NetworkWatcher_centraluseuap/connectionMonitors/CmFreqTest", "IngestionWorkspaceResourceId": "/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourceGroups/ER-Lab/providers/Microsoft.OperationalInsights/workspaces/npm-devEUS2Workspace", "TimeCreated": "2018-09-26T06:08:00Z", "TestGroupName": "TestGroup_123", "TestConfigurationName": "TestConfig123", "SourceType": "OnPremiseMachine", "SourceResourceId": "ARM resource ID goes here", "SourceAddress": "10.10.1.1", "SourceName": "myEUSWorkspace", "DestinationType": "Address", "DestinationResourceId": "151d0f93-5b26-49b4-a783-048ace9cd4d0", "DestinationAddress": "www.bing.com", "DestinationName": "Bing", "DestinationAgentId": "151d0f93-5b26-49b4-a783-048ace9cd4d0", "Protocol": "HTTP", "DestinationPort": "443", "DestinationIP": "10.10.1.1", "ChecksTotal": "10", "ChecksFailed": "5", "ChecksFailedPercentThreshold": "20", "RoundTripTimeMsThreshold": "10.123", "MinRoundTripTimeMs": "0.675", "MaxRoundTripTimeMs": "0.675", "AvgRoundTripTimeMs": "0.675", "TestResult": "Pass" }'
        _validCmTestData = JSON.parse(_validCmTestDataStr)
        _res, _prob = NPMContract::IsValidDataitem(_validCmTestData, NPMContract::DATAITEM_CONNECTIONMONITOR_TEST)
        assert_equal(NPMContract::DATAITEM_VALID, _res, "Valid CM Test data sent but validation returned invalid")
    end

    def test_contract_09_cm_path_data
        # Checking for valid cm path data case
        _validCmPathDataStr = '{ "SubType": "ConnectionMonitorPath", "RecordId": "151d0f93-5b26-49b4-a783-048ace9cd4d0", "ConnectionMonitorResourceId": "/subscriptions/c9acd95d-34fe-4603-b50a-89c27c045b02/resourceGroups/NetworkWatcherRG/providers/Microsoft.Network/networkWatchers/NetworkWatcher_centraluseuap/connectionMonitors/CmFreqTest", "IngestionWorkspaceResourceId": "/subscriptions/9cece3e3-0f7d-47ca-af0e-9772773f90b7/resourceGroups/ER-Lab/providers/Microsoft.OperationalInsights/workspaces/npm-devEUS2Workspace", "TimeCreated": "2018-09-26T06:08:00Z", "TestGroupName": "TestGroup_123", "TestConfigurationName": "TestConfig123", "SourceType": "OnPremiseMachine", "SourceResourceId": "ARM resource ID goes here", "SourceAddress": "10.10.1.1", "SourceName": "myEUSWorkspace", "DestinationType": "Address", "DestinationResourceId": "151d0f93-5b26-49b4-a783-048ace9cd4d0", "DestinationAddress": "www.bing.com", "DestinationName": "Bing", "Protocol": "HTTP", "DestinationPort": "443", "ChecksTotal": "10", "ChecksFailed": "5", "ChecksFailedPercentThreshold": "20", "RoundTripTimeMsThreshold": "10.123", "MinRoundTripTimeMs": "0.675", "MaxRoundTripTimeMs": "0.675", "AvgRoundTripTimeMs": "0.675", "PathTestResult": "Pass", "HopAddresses": "2404:f801:28:1a:991b:708e:2841:da3a;2404:f801:28:1a:ff::2;2404:f801:0:1:ff:0:62:2;2404:f801:0:2:ff::256;2404:f801:0:2:ff::286;2404:f801:8028:0:ff::22;*;2a01:111:2000:1::b85;*;2001:4860:0:115d::1;*;2404:6800:4009:800::2004" }'
        _validCmPathData = JSON.parse(_validCmPathDataStr)
        _res, _prob = NPMContract::IsValidDataitem(_validCmPathData, NPMContract::DATAITEM_CONNECTIONMONITOR_PATH)
        assert_equal(NPMContract::DATAITEM_VALID, _res, "Valid CM Path data sent but validation returned invalid")
    end

    def test_contract_10_agent_diagnostics_data
        # Checking for valid cm path data case
        _validAgentDiagnosticsDataStr = '{ "SubType": "NetworkAgentDiagnostics", "TimeGenerated": "2019-07-17T11:32:30.817Z", "NotificationCode": "0", "NotificationType": "5", "Computer": "vakarana.fareast.corp.microsoft.com" }'
        _validAgentDiagnosticsData = JSON.parse(_validAgentDiagnosticsDataStr)
        _res, _prob = NPMContract::IsValidDataitem(_validAgentDiagnosticsData, NPMContract::DATAITEM_AGENT_DIAGNOSTICS)
        assert_equal(NPMContract::DATAITEM_VALID, _res, "Valid Agent Diagnostics data sent but validation returned invalid")
    end
end
